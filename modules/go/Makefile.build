GLIDE	:= $(shell which glide 2>/dev/null)
INSTALL_DIR ?= /usr/local/sbin
RELEASE_DIR ?= release
APP ?= $(shell basename `pwd`)

## Build binary
go/build: $(GO)
	$(call assert-set,GO)
	$(GO) build -o $(RELEASE_DIR)/$(APP)

## Build binary for all platforms
go/build-all: $(GO)
	$(call assert-set,GO)
ifeq ($(RELEASE_ARCH),)
	gox -output "${RELEASE_DIR}/${APP}_{{.OS}}_{{.Arch}}"
else
	gox -osarch="$(RELEASE_ARCH)" -output "${RELEASE_DIR}/${APP}_{{.OS}}_{{.Arch}}"
endif

## Install dependencies
go/deps: $(GO)
	$(call assert-set,GO)
	$(GO) get
	$(GO) mod tidy

## DEPRECATED Install dependencies
go/glide-deps: $(GLIDE)
	@echo "DEPRECATED: Please update to 'go mod' and use go/deps"
	$(call assert-set,GLIDE)
	$(GLIDE) install --strip-vendor
	$(GLIDE) update  --strip-vendor

## DEPRECATED Install dependencies for build
go/glide-deps-build:
	@echo "DEPRECATED: Please update to 'go mod' and use go/deps"
	$(call assert-set,GOPATH)
	mkdir -p  $(GOPATH)/bin
	# 2022-098-02 https://glide.sh/get no longer works (parked domain, bad SSL cert)
	# which $(GLIDE) || (curl https://glide.sh/get | sh)
	which $(GLIDE) || apk add --no-cache glide

## Install development dependencies
go/deps-dev: $(GO)
	$(call assert-set,GO)
	$(GO) install golang.org/x/lint/golint@latest
	$(GO) install github.com/mitchellh/gox@latest

## Clean compiled binary
go/clean:
	rm -rf $(RELEASE_DIR)
	
## Clean compiled binary and dependencies
go/clean-all: go/clean
	$(GO) mod download

## DEPRECATED Clean compiled binary and dependency
go/glide-clean-all: go/clean
	@echo "DEPRECATED: Please update to 'go mod' and use go/clean-all"
	rm -rf vendor
	rm -rf glide.lock

## Install cli
go/install: $(APP) go/build
	cp $(RELEASE_DIR)/$(APP) $(INSTALL_DIR)
	chmod 555 $(INSTALL_DIR)/$(APP)
