REPO_URL?=https://charts.cloudposse.com

ifneq ($(TRAVIS_PULL_REQUEST_BRANCH),)
  BRANCH=pr-$(TRAVIS_PULL_REQUEST_BRANCH)
else ifneq ($(TRAVIS_BRANCH),)
  BRANCH=$(TRAVIS_BRANCH)
else ifneq ($(TRAVIS_TAG),)
  BRANCH=$(TRAVIS_TAG)
else
  BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
endif

ifeq ($(BRANCH),master)
	CURRENT_REPO_URL?=$(REPO_URL)
else
	CURRENT_REPO_URL?=https://charts.dev.cloudposse.com/$(BRANCH)
endif


.PHONY : helm\:repo\:info
## Show repo info
helm\:repo\:info:
	@echo "REPO_URL: $(REPO_URL)"
	@echo "CURRENT_REPO_URL: $(CURRENT_REPO_URL)"

.PHONY: helm\:repo\:add_remote
## Add helm remote repos
helm\:repo\:add_remote:
	@$($(HELM) repo rm kubernetes-charts)
	@$(HELM) repo add kubernetes-charts http://storage.googleapis.com/kubernetes-charts
	@$($(HELM) repo rm cloudposse-stable)
	@$(HELM) repo add cloudposse-stable $(REPO_URL)/stable
	@$($(HELM) repo rm cloudposse-incubator)
	@$(HELM) repo add cloudposse-incubator $(REPO_URL)/incubator
	@$(HELM) repo update
	@$(HELM) repo list

.PHONY: helm\:repo\:add_current
## Add helm remote dev repos
helm\:repo\:add_current:
	@$($(HELM) repo rm cloudposse-dev-stable)
	@$(HELM) repo add cloudposse-dev-stable $(CURRENT_REPO_URL)/stable
	@$($(HELM) repo rm cloudposse-dev-incubator)
	@$(HELM) repo add cloudposse-dev-incubator $(CURRENT_REPO_URL)/incubator
	@$(HELM) repo update
	@$(HELM) repo list

.PHONY : helm\:repo\:fix-perms
## Fix repo filesystem permissions
helm\:repo\:fix-perms:
	$(call assert-set,REPO_PATH)
	@find ./$(REPO_PATH) -type f -name '*.yaml' -exec chmod 644 {} \;
	@find ./$(REPO_PATH) -type f -name '*.txt' -exec chmod 644 {} \;
	@find ./$(REPO_PATH) -type f -name '*.tpl' -exec chmod 644 {} \;
	@find ./$(REPO_PATH) -type f -name '*.md' -exec chmod 644 {} \;
	@find ./$(REPO_PATH) -type f -name '*.tgz' -exec chmod 644 {} \;

.PHONY : helm\:repo\:package
helm\:repo\:package:
	$(call assert-set,REPO_PATH)
	@echo "## Building packages in $(shell basename $(CURDIR))"
	@find ./$(REPO_PATH)/library -maxdepth 1 -mindepth 1 -type d '!' -name packages  | \
    	xargs -n 1 -I '{}' sh -c 'echo && echo "# Updating dependencies for {}" && $(HELM) dependency build --debug {}'
	@find ./$(REPO_PATH)/library -maxdepth 1 -mindepth 1 -type d '!' -name packages  | \
    	xargs -n 1 -I '{}' sh -c 'echo && echo "# Building package for {}" && $(HELM) package --debug {}'
	@find ./$(REPO_PATH) -maxdepth 1 -mindepth 1 -type f -name '*.tgz' | \
		xargs -I '{}' mv {} packages

.PHONY : helm\:repo\:index
helm\:repo\:index:
	$(call assert-set,REPO_PATH)
	@echo "## Generating index for $(CURRENT_REPO_URL)"
	@$(HELM) repo index ./$(REPO_PATH)/packages --url $(CURRENT_REPO_URL)/$(REPO_PATH) --debug

.PHONY : helm\:repo\:lint
## Lint library charts
helm\:repo\:lint:
	$(call assert-set,REPO_PATH)
	@echo "## Linting charts $(shell pwd)/library"
	@find ./$(REPO_PATH)/library -maxdepth 1 -mindepth 1 -type d | \
    	xargs -n 1 -I'{}' $(HELM) lint --strict {}


.PHONY : helm\:repo\:clean
## Clean helm repo
helm\:repo\:clean:
	$(call assert-set,REPO_PATH)
	@rm -f *.tgz
	@find ./$(REPO_PATH)/library -maxdepth 3 -mindepth 3 -type f -name '*.tgz' -delete
	@rm -f ./$(REPO_PATH)/packages/index.yaml ./packages/*.tgz

.PHONY : helm\:repo\:build
## Build repo
helm\:repo\:build:
	$(call assert-set,REPO_PATH)
	@make helm:repo:clean
	@make helm:repo:fix-perms
	@make helm:repo:lint
	@make helm:repo:package


