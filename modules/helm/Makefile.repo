HELM_REPO_NAMES ?= stable incubator demo
HELM_REPO_PREFIX ?= cloudposse

REPO_PATH ?= ./$(REPO_NAME)
PACKAGE_PATH ?= ./packages/$(REPO_NAME)

REPO_URL?=https://charts.cloudposse.com

ifneq ($(TRAVIS_PULL_REQUEST_BRANCH),)
  BRANCH=pr-$(TRAVIS_PULL_REQUEST_BRANCH)
else ifneq ($(TRAVIS_BRANCH),)
  BRANCH=$(TRAVIS_BRANCH)
else ifneq ($(TRAVIS_TAG),)
  BRANCH=$(TRAVIS_TAG)
else
  BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
endif

ifeq ($(BRANCH),master)
	CURRENT_REPO_URL?=$(REPO_URL)
else
	CURRENT_REPO_URL?=https://charts.dev.cloudposse.com/$(BRANCH)
endif

.PHONY : helm\:repo\:info
## Show repo info
helm\:repo\:info:
	@echo "REPO_URL: $(REPO_URL)"
	@echo "CURRENT_REPO_URL: $(CURRENT_REPO_URL)"

.PHONY: helm\:repo\:add-remote
## Add helm remote repos
helm\:repo\:add-remote:
	@make helm:repo:add \
		HELM_REPO_URL=$(REPO_URL)

.PHONY: helm\:repo\:add-current
## Add helm remote dev repos
helm\:repo\:add-current:
	@make helm:repo:add \
		HELM_REPO_PREFIX=$(HELM_REPO_PREFIX)-dev \
		HELM_REPO_URL=$(CURRENT_REPO_URL)
	
helm\:repo\:add:
	@$(HELM) repo add kubernetes-charts http://storage.googleapis.com/kubernetes-charts
	@for repo in $(HELM_REPO_NAMES); do \
		if [ -d "$$repo" ]; then \
			curl --fail -s -q $(HELM_REPO_URL)/$$repo/index.yaml -o /dev/null; \
			if [ $$? -eq 0 ]; then \
				$(HELM) repo add $(HELM_REPO_PREFIX)-$$repo $(HELM_REPO_URL)/$$repo; \
			else \
				echo "$(HELM_REPO_URL)/$$repo not available"; \
			fi; \
		else \
			echo "$$repo does not exist; skipping..."; \
		fi; \
	done
	@$(HELM) repo update
	@$(HELM) repo list

.PHONY : helm\:repo\:fix-perms
## Fix repo filesystem permissions
helm\:repo\:fix-perms:
	$(call assert-set,REPO_NAME)
	@find $(REPO_PATH) -type f -name '*.yaml' -exec chmod 644 {} \;
	@find $(REPO_PATH) -type f -name '*.txt' -exec chmod 644 {} \;
	@find $(REPO_PATH) -type f -name '*.tpl' -exec chmod 644 {} \;
	@find $(REPO_PATH) -type f -name '*.md' -exec chmod 644 {} \;
	@find $(REPO_PATH) -type f -name '*.tgz' -exec chmod 644 {} \;

.PHONY : helm\:repo\:package
helm\:repo\:package:
	$(call assert-set,REPO_NAME)
	@echo "## Building packages in $(shell basename $(CURDIR))"
	@find $(REPO_PATH) -maxdepth 1 -mindepth 1 -type d  | \
    	xargs -n 1 -I '{}' sh -c 'echo && echo "# Updating dependencies for {}" && $(HELM) dependency build --debug {}'
	@find $(REPO_PATH) -maxdepth 1 -mindepth 1 -type d  | \
    	xargs -n 1 -I '{}' sh -c 'echo && echo "# Building package for {}" && $(HELM) package --debug {}'
	@mkdir -p $(PACKAGE_PATH)
	@find . -maxdepth 1 -mindepth 1 -type f -name '*.tgz' | \
		xargs -I '{}' mv {} $(PACKAGE_PATH)

.PHONY : helm\:repo\:index
helm\:repo\:index:
	$(call assert-set,REPO_NAME)
	@echo "## Generating index for $(CURRENT_REPO_URL)/$(REPO_NAME)"
	@$(CURL) --fail -s -q $(CURRENT_REPO_URL)/$(REPO_NAME)/index.yaml -o /tmp/index.yaml; \
	if [ $$? -eq 0 ]; then \
		$(HELM) repo index $(PACKAGE_PATH) --merge /tmp/index.yaml --url $(CURRENT_REPO_URL)/$(REPO_NAME) --debug; \
	else \
		$(HELM) repo index $(PACKAGE_PATH) --url $(CURRENT_REPO_URL)/$(REPO_NAME) --debug; \
	fi; \

.PHONY : helm\:repo\:lint
## Lint charts
helm\:repo\:lint:
	$(call assert-set,REPO_NAME)
	@echo "## Linting charts $(shell pwd)"
	@find $(REPO_PATH) -maxdepth 1 -mindepth 1 -type d | \
    	xargs -n 1 -I'{}' $(HELM) lint --strict {}


.PHONY : helm\:repo\:clean
## Clean helm repo
helm\:repo\:clean:
	$(call assert-set,REPO_NAME)
	@rm -f *.tgz
	@find $(REPO_PATH) -maxdepth 3 -mindepth 3 -type f -name '*.tgz' -delete
	@rm -f $(PACKAGE_PATH)/*

.PHONY : helm\:repo\:build
## Build repo
helm\:repo\:build:
	$(call assert-set,REPO_NAME)
	@make helm:repo:clean
	@make helm:repo:fix-perms
	@make helm:repo:lint
	@make helm:repo:package


